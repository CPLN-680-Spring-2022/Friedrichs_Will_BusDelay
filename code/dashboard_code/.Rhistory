ylab = "Airports",
cex.names=0.5,
cex.axis=0.75,
horiz = TRUE,
names.arg=c(smallHubs2AD$LOC_ID),
col = "white")
legend("right",
"Change between 2008 and 2018",
fill = "white",
bty="n"
)
# Second half of small airports arrival delays
smallHubs1AD$CH_DEP = (smallHubs1AD$ARR_DELAY_18 - smallHubs1AD$ARR_DELAY_08)/
smallHubs1AD$ARR_DELAY_08
barplot(smallHubs1AD$CH_DEP,
las = 1,
lwd = 1,
ylim = c(0,35),
xlab = "Total Enplanements",
ylab = "Airports",
cex.names=0.5,
cex.axis=0.75,
horiz = TRUE,
names.arg=c(smallHubs1AD$LOC_ID),
col = "white")
legend("right",
"Change between 2008 and 2018",
fill = "white",
bty="n"
)
counts2AD <- rbind(smallHubs2AD$ARR_DELAY_18,smallHubs2AD$ARR_DELAY_08)
barplot(counts2AD,
las = 1,
lwd = 1,
ylim = c(0,70),
xlab = "Total Enplanements",
ylab = "Airport",
cex.names=0.5,
cex.axis=0.75,
beside = TRUE,
horiz = TRUE,
names.arg=c(smallHubs2$LOC_ID),
col = c("black","darkgray"))
legend("right",
c("2008","2018"),
fill = c("darkgray","black"),
bty="n"
)
counts1AD <- rbind(smallHubs1AD$ARR_DELAY_18,smallHubs1AD$ARR_DELAY_08)
barplot(counts1AD,
las = 1,
lwd = 1,
ylim = c(0,70),
xlab = "Total Enplanements",
ylab = "Airport",
cex.names=0.5,
cex.axis=0.75,
beside = TRUE,
horiz = TRUE,
names.arg=c(smallHubs1$LOC_ID),
col = c("black","darkgray"))
legend("right",
c("2008","2018"),
fill = c("darkgray","black"),
bty="n"
)
which git
brew install git
ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"
ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)
""
ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"
ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"
brew install git
ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"
git config --global user.name 'Willfriedrichs'
git config --global user.email 'will.friedrichs@gmail.com'
# Before creating the leaflet, load in the shapefile of points from github
#   loading from github enables the running of this script without necessatating
#   the downloading of anything.
library(RCurl)
asasa = sf::st_read('https://raw.githubusercontent.com/CPLN-680-Spring-2022/Friedrichs_Will_BusDelay/main/raw_data/map_data/stops_by_route/routestops')
asasa = sf::st_read('https://raw.githubusercontent.com/CPLN-680-Spring-2022/Friedrichs_Will_BusDelay/main/raw_data/map_data/stops_by_route/routestops.gdb')
asasa = sf::st_read('https://raw.githubusercontent.com/CPLN-680-Spring-2022/Friedrichs_Will_BusDelay/main/raw_data/map_data/stops_by_route/routestops.dbf')
View(asasa)
asasa = sf::st_read('https://raw.githubusercontent.com/CPLN-680-Spring-2022/Friedrichs_Will_BusDelay/main/raw_data/map_data/stops_by_route/routestops.dbf')
asasa = st_as_sf(asasa,  coords = c("lon", "lat"), crs = projcrs)
asasa = st_as_sf(asasa,  coords = c("lon", "lat"), crs = projcrs)
asasa = sf::st_read('https://raw.githubusercontent.com/CPLN-680-Spring-2022/Friedrichs_Will_BusDelay/main/raw_data/map_data/stops_by_route/routestops.dbf')
asasa = st_as_sf(asasa,  coords = c("lon", "lat"), crs = projcrs)
# an R package that makes it easy to build interactive web apps straight from R
library(shiny)
# an R package that makes it easy to build interactive web apps straight from R
library(shiny)
# a library that makes it easy to use Shiny to create dashboards
library(shinydashboard)
# an open source JavaScript library used to build web mapping applications
library(leaflet)
# dashboard code: simple dashboard example
# Dashboard basics: https://www.youtube.com/watch?v=41jmGq7ALMY&ab_channel=Appsilon
# Interactive map dashboard: https://byollin.github.io/ShinyLeaflet/#25
# libraries necessary
# an R package that makes it easy to build interactive web apps straight from R
library(shiny)
# a library that makes it easy to use Shiny to create dashboards
library(shinydashboard)
# an open source JavaScript library used to build web mapping applications
library(leaflet)
###########################################################################
# Using the early bus data and the cancelled bus data, map bus performance.
###########################################################################
# from the CSVs, create point data for each stop
# from the CSVs, create point data for each early stop (bigger, clickable)
# from the CSVs, create point data for each early stop (bigger, clickable)
# from the CSVs, create point data for each bus route (bigger, clickable)
#################################################8##########################
# Load maps to the dashboard.
###########################################################################
# Using leaflet, create an image of Philadelphia and set the view.
# Before creating the leaflet, load in the shapefile of points from github
#   loading from github enables the running of this script without necessatating
#   the downloading of anything.
asasa = sf::st_read('https://raw.githubusercontent.com/CPLN-680-Spring-2022/Friedrichs_Will_BusDelay/main/raw_data/map_data/stops_by_route/routestops.dbf')
asasa = st_as_sf(asasa,  coords = c("lon", "lat"), crs = projcrs)
# The leaflet function creates the zoomable image.
leaflet(options = leafletOptions(zoomControl = FALSE)) %>%
# This adds the pre-package basemap (Positron = day, DarkMatter = night)
addProviderTiles(providers$CartoDB.DarkMatter) %>%
# Set the view to the coordinates of Philadelphia
setView(lng = -75.1635, lat = 39.9528, zoom = 9)
# addCircleMarkers displays the point data.
# dashboard code: simple dashboard example
# Dashboard basics: https://www.youtube.com/watch?v=41jmGq7ALMY&ab_channel=Appsilon
# Interactive map dashboard: https://byollin.github.io/ShinyLeaflet/#25
# libraries necessary
# an R package that makes it easy to build interactive web apps straight from R
library(shiny)
# a library that makes it easy to use Shiny to create dashboards
library(shinydashboard)
# an open source JavaScript library used to build web mapping applications
library(leaflet)
library(sf)
###########################################################################
# Using the early bus data and the cancelled bus data, map bus performance.
###########################################################################
# from the CSVs, create point data for each stop
# from the CSVs, create point data for each early stop (bigger, clickable)
# from the CSVs, create point data for each early stop (bigger, clickable)
# from the CSVs, create point data for each bus route (bigger, clickable)
#################################################8##########################
# Load maps to the dashboard.
###########################################################################
# Using leaflet, create an image of Philadelphia and set the view.
# Before creating the leaflet, load in the shapefile of points from github
#   loading from github enables the running of this script without necessatating
#   the downloading of anything.
asasa = sf::st_read('https://raw.githubusercontent.com/CPLN-680-Spring-2022/Friedrichs_Will_BusDelay/main/raw_data/map_data/stops_by_route/routestops.dbf')
asasa = st_as_sf(asasa,  coords = c("lon", "lat"), crs = projcrs)
# The leaflet function creates the zoomable image.
leaflet(options = leafletOptions(zoomControl = FALSE)) %>%
# This adds the pre-package basemap (Positron = day, DarkMatter = night)
addProviderTiles(providers$CartoDB.DarkMatter) %>%
# Set the view to the coordinates of Philadelphia
setView(lng = -75.1635, lat = 39.9528, zoom = 9)
# addCircleMarkers displays the point data.
View(asasa)
# dashboard code: simple dashboard example
# Dashboard basics: https://www.youtube.com/watch?v=41jmGq7ALMY&ab_channel=Appsilon
# Interactive map dashboard: https://byollin.github.io/ShinyLeaflet/#25
# libraries necessary
# an R package that makes it easy to build interactive web apps straight from R
library(shiny)
# a library that makes it easy to use Shiny to create dashboards
library(shinydashboard)
# an open source JavaScript library used to build web mapping applications
library(leaflet)
library(sf)
###########################################################################
# Using the early bus data and the cancelled bus data, map bus performance.
###########################################################################
# from the CSVs, create point data for each stop
# from the CSVs, create point data for each early stop (bigger, clickable)
# from the CSVs, create point data for each early stop (bigger, clickable)
# from the CSVs, create point data for each bus route (bigger, clickable)
#################################################8##########################
# Load maps to the dashboard.
###########################################################################
# Using leaflet, create an image of Philadelphia and set the view.
# Before creating the leaflet, load in the shapefile of points from github
#   loading from github enables the running of this script without necessatating
#   the downloading of anything.
asasa = sf::st_read('https://raw.githubusercontent.com/CPLN-680-Spring-2022/Friedrichs_Will_BusDelay/main/raw_data/map_data/stops_by_route/routestops.dbf')
asasa = st_as_sf(asasa,  coords = c("Lon", "Lat"), crs = projcrs)
# The leaflet function creates the zoomable image.
leaflet(options = leafletOptions(zoomControl = FALSE)) %>%
# This adds the pre-package basemap (Positron = day, DarkMatter = night)
addProviderTiles(providers$CartoDB.DarkMatter) %>%
# Set the view to the coordinates of Philadelphia
setView(lng = -75.1635, lat = 39.9528, zoom = 9)
# addCircleMarkers displays the point data.
# dashboard code: simple dashboard example
# Dashboard basics: https://www.youtube.com/watch?v=41jmGq7ALMY&ab_channel=Appsilon
# Interactive map dashboard: https://byollin.github.io/ShinyLeaflet/#25
# libraries necessary
# an R package that makes it easy to build interactive web apps straight from R
library(shiny)
# a library that makes it easy to use Shiny to create dashboards
library(shinydashboard)
# an open source JavaScript library used to build web mapping applications
library(leaflet)
library(sf)
###########################################################################
# Using the early bus data and the cancelled bus data, map bus performance.
###########################################################################
# from the CSVs, create point data for each stop
# from the CSVs, create point data for each early stop (bigger, clickable)
# from the CSVs, create point data for each early stop (bigger, clickable)
# from the CSVs, create point data for each bus route (bigger, clickable)
###########################################################################
# Load maps to the dashboard.
###########################################################################
# Using leaflet, create an image of Philadelphia and set the view.
# Before creating the leaflet, load in the shapefile of points from github
#   loading from github enables the running of this script without necessatating
#   the downloading of anything.
asasa = sf::st_read('https://raw.githubusercontent.com/CPLN-680-Spring-2022/Friedrichs_Will_BusDelay/main/raw_data/map_data/stops_by_route/routestops.dbf')
asasa = st_as_sf(asasa,  coords = c("Lon", "Lat"))
class(asasa)
points = st_as_sf(asasa,  coords = c("Lon", "Lat")) %>% st_transform(4326)
points = st_as_sf(asasa,  coords = c("Lon", "Lat"))
# The leaflet function creates the zoomable image.
leaflet(options = leafletOptions(zoomControl = FALSE)) %>%
# This adds the pre-package basemap (Positron = day, DarkMatter = night)
addProviderTiles(providers$CartoDB.DarkMatter) %>%
# Set the view to the coordinates of Philadelphia
setView(lng = -75.1635, lat = 39.9528, zoom = 9) %>%
# addCircleMarkers displays the point data.
addCircleMarkers(data = points, fillColor = 'red', fillOpacity = 0.6, stroke = FALSE,
radius = 4, clusterOptions = markerClusterOptions())
# dashboard code: simple dashboard example
# Dashboard basics: https://www.youtube.com/watch?v=41jmGq7ALMY&ab_channel=Appsilon
# Interactive map dashboard: https://byollin.github.io/ShinyLeaflet/#25
# libraries necessary
# an R package that makes it easy to build interactive web apps straight from R
library(shiny)
# a library that makes it easy to use Shiny to create dashboards
library(shinydashboard)
# an open source JavaScript library used to build web mapping applications
library(leaflet)
library(sf)
###########################################################################
# Using the early bus data and the cancelled bus data, map bus performance.
###########################################################################
# from the CSVs, create point data for each stop
# from the CSVs, create point data for each early stop (bigger, clickable)
# from the CSVs, create point data for each early stop (bigger, clickable)
# from the CSVs, create point data for each bus route (bigger, clickable)
###########################################################################
# Load maps to the dashboard.
###########################################################################
# Using leaflet, create an image of Philadelphia and set the view.
# Before creating the leaflet, load in the shapefile of points from github
#   loading from github enables the running of this script without necessatating
#   the downloading of anything.
points = st_read('https://raw.githubusercontent.com/CPLN-680-Spring-2022/Friedrichs_Will_BusDelay/main/raw_data/map_data/stops_by_route/routestops.dbf')
points = st_as_sf(asasa,  coords = c("Lon", "Lat"))
# The leaflet function creates the zoomable image.
leaflet(options = leafletOptions(zoomControl = FALSE)) %>%
# This adds the pre-package basemap (Positron = day, DarkMatter = night)
addProviderTiles(providers$CartoDB.DarkMatter) %>%
# Set the view to the coordinates of Philadelphia
setView(lng = -75.1635, lat = 39.9528, zoom = 9) %>%
# addCircleMarkers displays the point data.
addCircleMarkers(data = points, fillColor = 'red', fillOpacity = 0.6, stroke = FALSE,
radius = 4)
# dashboard code: simple dashboard example
# Dashboard basics: https://www.youtube.com/watch?v=41jmGq7ALMY&ab_channel=Appsilon
# Interactive map dashboard: https://byollin.github.io/ShinyLeaflet/#25
# libraries necessary
# an R package that makes it easy to build interactive web apps straight from R
library(shiny)
# a library that makes it easy to use Shiny to create dashboards
library(shinydashboard)
# an open source JavaScript library used to build web mapping applications
library(leaflet)
library(sf)
###########################################################################
# Using the early bus data and the cancelled bus data, map bus performance.
###########################################################################
# from the CSVs, create point data for each stop
# from the CSVs, create point data for each early stop (bigger, clickable)
# from the CSVs, create point data for each early stop (bigger, clickable)
# from the CSVs, create point data for each bus route (bigger, clickable)
###########################################################################
# Load maps to the dashboard.
###########################################################################
# Using leaflet, create an image of Philadelphia and set the view.
# Before creating the leaflet, load in the shapefile of points from github
#   loading from github enables the running of this script without necessatating
#   the downloading of anything.
points = st_read('https://raw.githubusercontent.com/CPLN-680-Spring-2022/Friedrichs_Will_BusDelay/main/raw_data/map_data/stops_by_route/routestops.dbf')
points = st_as_sf(asasa,  coords = c("Lon", "Lat"))
# The leaflet function creates the zoomable image.
leaflet(options = leafletOptions(zoomControl = FALSE)) %>%
# This adds the pre-package basemap (Positron = day, DarkMatter = night)
addProviderTiles(providers$CartoDB.DarkMatter) %>%
# Set the view to the coordinates of Philadelphia
setView(lng = -75.1635, lat = 39.9528, zoom = 9) %>%
# addCircleMarkers displays the point data.
addCircleMarkers(data = points, fillColor = 'red', fillOpacity = 0.6, stroke = FALSE,
radius = 1)
# dashboard code: simple dashboard example
# Dashboard basics: https://www.youtube.com/watch?v=41jmGq7ALMY&ab_channel=Appsilon
# Interactive map dashboard: https://byollin.github.io/ShinyLeaflet/#25
# libraries necessary
# an R package that makes it easy to build interactive web apps straight from R
library(shiny)
# a library that makes it easy to use Shiny to create dashboards
library(shinydashboard)
# an open source JavaScript library used to build web mapping applications
library(leaflet)
library(sf)
###########################################################################
# Using the early bus data and the cancelled bus data, map bus performance.
###########################################################################
# from the CSVs, create point data for each stop
# from the CSVs, create point data for each early stop (bigger, clickable)
# from the CSVs, create point data for each early stop (bigger, clickable)
# from the CSVs, create point data for each bus route (bigger, clickable)
###########################################################################
# Load maps to the dashboard.
###########################################################################
# Using leaflet, create an image of Philadelphia and set the view.
# Before creating the leaflet, load in the shapefile of points from github
#   loading from github enables the running of this script without necessatating
#   the downloading of anything.
points = st_read('https://raw.githubusercontent.com/CPLN-680-Spring-2022/Friedrichs_Will_BusDelay/main/raw_data/map_data/stops_by_route/routestops.dbf')
points = st_as_sf(asasa,  coords = c("Lon", "Lat"))
# The leaflet function creates the zoomable image.
leaflet(options = leafletOptions(zoomControl = FALSE)) %>%
# This adds the pre-package basemap (Positron = day, DarkMatter = night)
addProviderTiles(providers$CartoDB.DarkMatter) %>%
# Set the view to the coordinates of Philadelphia
setView(lng = -75.1635, lat = 39.9528, zoom = 9) %>%
# addCircleMarkers displays the point data.
addCircleMarkers(data = points, fillColor = 'gray', fillOpacity = 0.3, stroke = FALSE,
radius = 1.5)
# dashboard code: simple dashboard example
# Dashboard basics: https://www.youtube.com/watch?v=41jmGq7ALMY&ab_channel=Appsilon
# Interactive map dashboard: https://byollin.github.io/ShinyLeaflet/#25
# libraries necessary
# an R package that makes it easy to build interactive web apps straight from R
library(shiny)
# a library that makes it easy to use Shiny to create dashboards
library(shinydashboard)
# an open source JavaScript library used to build web mapping applications
library(leaflet)
library(sf)
###########################################################################
# Using the early bus data and the cancelled bus data, map bus performance.
###########################################################################
# from the CSVs, create point data for each stop
# from the CSVs, create point data for each early stop (bigger, clickable)
# from the CSVs, create point data for each early stop (bigger, clickable)
# from the CSVs, create point data for each bus route (bigger, clickable)
###########################################################################
# Load maps to the dashboard.
###########################################################################
# Using leaflet, create an image of Philadelphia and set the view.
# Before creating the leaflet, load in the shapefile of points from github
#   loading from github enables the running of this script without necessatating
#   the downloading of anything.
points = st_read('https://raw.githubusercontent.com/CPLN-680-Spring-2022/Friedrichs_Will_BusDelay/main/raw_data/map_data/stops_by_route/routestops.dbf')
points = st_as_sf(asasa,  coords = c("Lon", "Lat"))
# The leaflet function creates the zoomable image.
leaflet(options = leafletOptions(zoomControl = FALSE)) %>%
# This adds the pre-package basemap (Positron = day, DarkMatter = night)
addProviderTiles(providers$CartoDB.DarkMatter) %>%
# Set the view to the coordinates of Philadelphia
setView(lng = -75.1635, lat = 39.9528, zoom = 9) %>%
# addCircleMarkers displays the point data.
addCircleMarkers(data = points, fillColor = 'gray', fillOpacity = 0.1, stroke = TRUE,
radius = 1.5)
# dashboard code: simple dashboard example
# Dashboard basics: https://www.youtube.com/watch?v=41jmGq7ALMY&ab_channel=Appsilon
# Interactive map dashboard: https://byollin.github.io/ShinyLeaflet/#25
# libraries necessary
# an R package that makes it easy to build interactive web apps straight from R
library(shiny)
# a library that makes it easy to use Shiny to create dashboards
library(shinydashboard)
# an open source JavaScript library used to build web mapping applications
library(leaflet)
library(sf)
###########################################################################
# Using the early bus data and the cancelled bus data, map bus performance.
###########################################################################
# from the CSVs, create point data for each stop
# from the CSVs, create point data for each early stop (bigger, clickable)
# from the CSVs, create point data for each early stop (bigger, clickable)
# from the CSVs, create point data for each bus route (bigger, clickable)
###########################################################################
# Load maps to the dashboard.
###########################################################################
# Using leaflet, create an image of Philadelphia and set the view.
# Before creating the leaflet, load in the shapefile of points from github
#   loading from github enables the running of this script without necessatating
#   the downloading of anything.
points = st_read('https://raw.githubusercontent.com/CPLN-680-Spring-2022/Friedrichs_Will_BusDelay/main/raw_data/map_data/stops_by_route/routestops.dbf')
points = st_as_sf(asasa,  coords = c("Lon", "Lat"))
# The leaflet function creates the zoomable image.
leaflet(options = leafletOptions(zoomControl = FALSE)) %>%
# This adds the pre-package basemap (Positron = day, DarkMatter = night)
addProviderTiles(providers$CartoDB.DarkMatter) %>%
# Set the view to the coordinates of Philadelphia
setView(lng = -75.1635, lat = 39.9528, zoom = 9) %>%
# addCircleMarkers displays the point data.
addCircleMarkers(data = points, fillColor = 'gray', fillOpacity = 0.1, stroke = FALSE,
radius = 1)
# dashboard code: simple dashboard example
# Dashboard basics: https://www.youtube.com/watch?v=41jmGq7ALMY&ab_channel=Appsilon
# Interactive map dashboard: https://byollin.github.io/ShinyLeaflet/#25
# libraries necessary
# an R package that makes it easy to build interactive web apps straight from R
library(shiny)
# a library that makes it easy to use Shiny to create dashboards
library(shinydashboard)
# an open source JavaScript library used to build web mapping applications
library(leaflet)
library(sf)
###########################################################################
# Using the early bus data and the cancelled bus data, map bus performance.
###########################################################################
# from the CSVs, create point data for each stop
# from the CSVs, create point data for each early stop (bigger, clickable)
# from the CSVs, create point data for each early stop (bigger, clickable)
# from the CSVs, create point data for each bus route (bigger, clickable)
###########################################################################
# Load maps to the dashboard.
###########################################################################
# Using leaflet, create an image of Philadelphia and set the view.
# Before creating the leaflet, load in the shapefile of points from github
#   loading from github enables the running of this script without necessatating
#   the downloading of anything.
points = st_read('https://raw.githubusercontent.com/CPLN-680-Spring-2022/Friedrichs_Will_BusDelay/main/raw_data/map_data/stops_by_route/routestops.dbf')
points = st_as_sf(asasa,  coords = c("Lon", "Lat"))
# The leaflet function creates the zoomable image.
leaflet(options = leafletOptions(zoomControl = FALSE)) %>%
# This adds the pre-package basemap (Positron = day, DarkMatter = night)
addProviderTiles(providers$CartoDB.DarkMatter) %>%
# Set the view to the coordinates of Philadelphia
setView(lng = -75.1635, lat = 39.9528, zoom = 10) %>%
# addCircleMarkers displays the point data.
addCircleMarkers(data = points, fillColor = 'gray', fillOpacity = 0.1, stroke = FALSE,
radius = 1.25)
# dashboard code: simple dashboard example
# Dashboard basics: https://www.youtube.com/watch?v=41jmGq7ALMY&ab_channel=Appsilon
# Interactive map dashboard: https://byollin.github.io/ShinyLeaflet/#25
# libraries necessary
# an R package that makes it easy to build interactive web apps straight from R
library(shiny)
# a library that makes it easy to use Shiny to create dashboards
library(shinydashboard)
# an open source JavaScript library used to build web mapping applications
library(leaflet)
library(sf)
###########################################################################
# Using the early bus data and the cancelled bus data, map bus performance.
###########################################################################
# from the CSVs, create point data for each stop
# from the CSVs, create point data for each early stop (bigger, clickable)
# from the CSVs, create point data for each early stop (bigger, clickable)
# from the CSVs, create point data for each bus route (bigger, clickable)
###########################################################################
# Load maps to the dashboard.
###########################################################################
# Using leaflet, create an image of Philadelphia and set the view.
# Before creating the leaflet, load in the shapefile of points from github
#   loading from github enables the running of this script without necessatating
#   the downloading of anything.
points = st_read('https://raw.githubusercontent.com/CPLN-680-Spring-2022/Friedrichs_Will_BusDelay/main/raw_data/map_data/stops_by_route/routestops.dbf')
points = st_as_sf(asasa,  coords = c("Lon", "Lat"))
# The leaflet function creates the zoomable image.
leaflet(options = leafletOptions(zoomControl = FALSE)) %>%
# This adds the pre-package basemap (Positron = day, DarkMatter = night)
addProviderTiles(providers$CartoDB.DarkMatter) %>%
# Set the view to the coordinates of Philadelphia
setView(lng = -75.1635, lat = 39.9528, zoom = 10) %>%
# addCircleMarkers displays the point data.
addCircleMarkers(data = points, fillColor = 'gray', fillOpacity = 0.1, stroke = FALSE,
radius = 1.3)
routes = st_read('https://raw.githubusercontent.com/CPLN-680-Spring-2022/Friedrichs_Will_BusDelay/main/raw_data/map_data/polyline_routes/routes.dbf')
routes = st_as_sf(routes,  coords = c("Lon", "Lat"))
routes = st_read('https://raw.githubusercontent.com/CPLN-680-Spring-2022/Friedrichs_Will_BusDelay/main/raw_data/map_data/polyline_routes/routes.dbf')
routes = st_read('https://raw.githubusercontent.com/CPLN-680-Spring-2022/Friedrichs_Will_BusDelay/main/raw_data/map_data/polyline_routes/routes.dbf')
View(routes)
routes = st_read('https://raw.githubusercontent.com/CPLN-680-Spring-2022/Friedrichs_Will_BusDelay/main/raw_data/map_data/polyline_routes/routes.dbf')
View(routes)
View(routes)
routes = st_read('https://raw.githubusercontent.com/CPLN-680-Spring-2022/Friedrichs_Will_BusDelay/main/raw_data/map_data/polyline_routes/routes.dbf')
routes = st_as_sf(routes,  coords = c("Lon", "Lat"))
routes = st_read('https://raw.githubusercontent.com/CPLN-680-Spring-2022/Friedrichs_Will_BusDelay/main/raw_data/map_data/polyline_routes/routes.dbf')
View(routes)
routes = st_read('https://raw.githubusercontent.com/CPLN-680-Spring-2022/Friedrichs_Will_BusDelay/main/raw_data/map_data/polyline_routes/routes.dbf')
View(routes)
View(routes)
routes = st_read('https://raw.githubusercontent.com/CPLN-680-Spring-2022/Friedrichs_Will_BusDelay/main/raw_data/map_data/polyline_routes/routes.dbf')
x = routes = st_read('https://raw.githubusercontent.com/CPLN-680-Spring-2022/Friedrichs_Will_BusDelay/main/raw_data/map_data/polyline_routes/routes.dbf')
View(x)
library(shiny); runApp('C:/Users/willf/iCloudDrive/Desktop/CPLN_680_Adv_Topics_in_GIS/local_repo_680/code/dashboard_code/dashboard_code_practice.R')
packageVersion("shiny")
library(shiny); runApp('C:/Users/willf/iCloudDrive/Desktop/CPLN_680_Adv_Topics_in_GIS/local_repo_680/code/dashboard_code/dashboard_code_practice.R')
